// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<NavigationIconMenu /> snapshot tests should match snapshot 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <NavigationIconMenu
    menuItems={
      Array [
        Object {
          "disabled": false,
          "linkTo": "/link",
          "onClick": [MockFunction],
          "primaryText": "Menu Item",
        },
      ]
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <StyledIconButton__StyledIconButton
          aria-label="action ellipsis icon"
          disableIconHover={false}
          disabled={false}
          onClick={[Function]}
          size="x-small"
        >
          <pure(MoreHoriz) />
        </StyledIconButton__StyledIconButton>,
        <WithStyles(Menu)
          anchorEl={null}
          onClose={[Function]}
          open={false}
        >
          <WithStyles(MenuItem)
            component={[Function]}
            disabled={false}
            onClick={[Function]}
            to="/link"
          >
            Menu Item
          </WithStyles(MenuItem)>
        </WithStyles(Menu)>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "aria-label": "action ellipsis icon",
          "children": <pure(MoreHoriz) />,
          "disableIconHover": false,
          "disabled": false,
          "onClick": [Function],
          "size": "x-small",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "anchorEl": null,
          "children": Array [
            <WithStyles(MenuItem)
              component={[Function]}
              disabled={false}
              onClick={[Function]}
              to="/link"
            >
              Menu Item
            </WithStyles(MenuItem)>,
          ],
          "onClose": [Function],
          "open": false,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": "1",
            "nodeType": "class",
            "props": Object {
              "children": "Menu Item",
              "component": [Function],
              "disabled": false,
              "onClick": [Function],
              "to": "/link",
            },
            "ref": null,
            "rendered": "Menu Item",
            "type": [Function],
          },
        ],
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <StyledIconButton__StyledIconButton
            aria-label="action ellipsis icon"
            disableIconHover={false}
            disabled={false}
            onClick={[Function]}
            size="x-small"
          >
            <pure(MoreHoriz) />
          </StyledIconButton__StyledIconButton>,
          <WithStyles(Menu)
            anchorEl={null}
            onClose={[Function]}
            open={false}
          >
            <WithStyles(MenuItem)
              component={[Function]}
              disabled={false}
              onClick={[Function]}
              to="/link"
            >
              Menu Item
            </WithStyles(MenuItem)>
          </WithStyles(Menu)>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "aria-label": "action ellipsis icon",
            "children": <pure(MoreHoriz) />,
            "disableIconHover": false,
            "disabled": false,
            "onClick": [Function],
            "size": "x-small",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "anchorEl": null,
            "children": Array [
              <WithStyles(MenuItem)
                component={[Function]}
                disabled={false}
                onClick={[Function]}
                to="/link"
              >
                Menu Item
              </WithStyles(MenuItem)>,
            ],
            "onClose": [Function],
            "open": false,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": "1",
              "nodeType": "class",
              "props": Object {
                "children": "Menu Item",
                "component": [Function],
                "disabled": false,
                "onClick": [Function],
                "to": "/link",
              },
              "ref": null,
              "rendered": "Menu Item",
              "type": [Function],
            },
          ],
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactFifteenAdapter {
      "options": Object {
        "supportPrevContextArgumentOfComponentDidUpdate": true,
      },
    },
  },
}
`;
